{"version":3,"sources":["../src/resolver.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;;;;;;;;;yBAES,aAAa;;;;IAE7B,QAAQ;AAED,WAFP,QAAQ,CAEA,UAAU,EAAE;0BAFpB,QAAQ;;AAIV,QAAI,CAAC,UAAU,GAAG,UAAU,CAAA;;AAE5B,QAAI,CAAC,SAAS,GAAG,4BAAe,CAAA;GACjC;;;;;;;;eAPG,QAAQ;;WAcL,iBAAC,OAAO,EAAE;;;AAEf,UAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA;AACjD,UAAI,UAAU,GAAG,EAAE,CAAA;AACnB,UAAG,cAAc,CAAC,aAAa,CAAC,EAAE;AAChC,kBAAU,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS;iBAAI,MAAK,OAAO,CAAC,SAAS,CAAC;SAAA,CAAC,CAAA;OACrF;;AAED,UAAG,OAAO,cAAc,KAAK,UAAU,EAAE;AACvC,YAAI,WAAW,GAAG,cAAc,qCAAI,UAAU,EAAC,CAAA;AAC/C,YAAG,cAAc,CAAC,YAAY,CAAC,EAAC;AAC9B,cAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;SACzC;AACD,eAAO,WAAW,CAAA;OACnB,MAAM;AACL,YAAG,cAAc,CAAC,YAAY,CAAC,EAAC;AAC9B,cAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,CAAA;SAC5C;AACD,eAAO,cAAc,CAAA;OACtB;KACF;;;WAEa,wBAAC,OAAO,EAAE;;AAEtB,UAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AAC9B,eAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;OACnC;;;;;AAKD,UAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;;AAE3B,eAAO,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAA;OACzC;;AAED,aAAO,OAAO,CAAC,OAAO,CAAC,CAAA;KACxB;;;SAnDG,QAAQ;;;qBAwDC,QAAQ","file":"resolver.js","sourcesContent":["/*\n* @Author: ahmadzuhdi\n* @Date:   2015-09-18 00:52:56\n* @Last Modified by:   ahmadzuhdi\n* @Last Modified time: 2015-11-12 07:58:13\n*/\n\n'use strict';\n\nimport container from './container'\n\nclass Resolver {\n\n  constructor(components) {\n\n    this.components = components\n\n    this.container = new container()\n  }\n\n  /**\n   * resolve a module and all dependency\n   * @param  {string} libName\n   * @return {Object}\n   */\n  resolve(libName) {\n\n    var requiredModule = this.resolveRequire(libName)\n    var components = []\n    if(requiredModule['@components']) {\n      components = requiredModule['@components'].map(component => this.resolve(component))\n    }\n\n    if(typeof requiredModule === 'function') {\n      let finalModule = requiredModule(...components)\n      if(requiredModule['@singleton']){\n        this.container.set(libName, finalModule)\n      }\n      return finalModule\n    } else {\n      if(requiredModule['@singleton']){\n        this.container.set(libName, requiredModule)\n      }\n      return requiredModule\n    }\n  }\n\n  resolveRequire(libName) {\n\n    if(this.container.get(libName)) {\n      return this.container.get(libName)\n    }\n\n    /**\n     * check if libName is a alias or not\n     */\n    if(this.components[libName]) {\n\n      return require(this.components[libName])\n    }\n\n    return require(libName)\n  }\n\n\n}\n\nexport default Resolver"]}